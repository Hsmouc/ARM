C51 COMPILER V9.01   ZLG7290                                                               05/09/2016 10:38:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ZLG7290
OBJECT MODULE PLACED IN .\LINKING\Output\ZLG7290.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL_v4\C51\BIN\C51.EXE DRI\ZLG7290.c BROWSE INCDIR(.\DRI;.\SYS;.\USR) DEBUG
                    - OBJECTEXTEND PRINT(.\LINKING\Listings\ZLG7290.lst) OBJECT(.\LINKING\Output\ZLG7290.obj)

line level    source

   1          #include  "i2c.h"
   2          #include  "ZLG7290.h"
   3          #define EEPROM24C02     0xA0
   4          #define  ZLG7290    0x70     //–æ∆¨µÿ÷∑
   5          
   6          #define  SubKey     0x01 
   7          #define  SubCmdBuf  0x07
   8          #define  SubDpRam   0x10
   9          
  10          
  11          
  12          void ZLG7290_ReadData(unsigned char address,unsigned char num)
  13          {
  14   1          IRcvStr(ZLG7290,address,I2C_temp,num);
  15   1      }
  16          
  17          void ZLG7290_WriteData(unsigned char address,unsigned char *buf,unsigned char num)
  18          {
  19   1          ISendStr(ZLG7290,address,buf,num);
  20   1      }
  21          
  22          void Read_ZLG7290Key(void)
  23          {
  24   1          char  usTmp;
  25   1          ZLG7290_ReadData(1,1);
  26   1          usTmp=I2C_temp[0];
  27   1          if(usTmp !=0)
  28   1          {
  29   2              if(usTmp<0x41)
  30   2              {
  31   3                  key_press=1;
  32   3                  key_code=usTmp;
  33   3              }
  34   2          }
  35   1      }
  36          
  37          void delayMS(unsigned int i)
  38          {
  39   1              unsigned int j,k;
  40   1              for(k=0;k<i;k++)
  41   1                      for(j=0;j<60;j++);
  42   1      }
  43          
  44          
  45          unsigned char ZLG7290_SendData(unsigned char SubAdd,unsigned char Data)
  46          {
  47   1          I2C_temp[0]=Data;
  48   1          if(SubAdd>0x17)
  49   1              {
  50   2              return 0;
  51   2          }
  52   1          ZLG7290_WriteData(SubAdd,I2C_temp,1);
  53   1              return 1;
  54   1      }
C51 COMPILER V9.01   ZLG7290                                                               05/09/2016 10:38:11 PAGE 2   

  55          
  56          unsigned char ZLG7290_SendCmd(unsigned char Data1,unsigned char Data2)
  57          {
  58   1          I2C_temp[0]=Data1;
  59   1          I2C_temp[1]=Data2;
  60   1          ZLG7290_WriteData(7,I2C_temp,2);
  61   1          delayMS(1);
  62   1          return 1;
  63   1      }  
  64          
  65          unsigned char ZLG7290_SendCmd0(unsigned char Data1)
  66          {
  67   1          I2C_temp[0]=Data1;
  68   1      
  69   1          ZLG7290_WriteData(7,I2C_temp,1);
  70   1          delayMS(1);
  71   1          return 1;
  72   1      }  
  73              
  74          
  75          void zlg7290_disp(void)
  76          {
  77   1          char i;
  78   1          for(i=0;i<8;i++)
  79   1          {
  80   2              ZLG7290_SendCmd(0x60+i,disp_buf[i]);
  81   2          }
  82   1      }      
  83          
  84          void clear_zlg7290_disp(void)
  85          {
  86   1          char i;
  87   1          for(i=0;i<8;i++)
  88   1          {
  89   2              ZLG7290_SendCmd(0x60+i,0x1f);
  90   2          }
  91   1      }
  92          
  93          void  zlg7290_disp_keycode(void)
  94          {       
  95   1          ZLG7290_SendCmd(0x60,0x0c);
  96   1          ZLG7290_SendCmd(0x61,0x00);
  97   1          ZLG7290_SendCmd(0x62,0x0d);
  98   1          ZLG7290_SendCmd(0x63,0x0e);
  99   1              ZLG7290_SendCmd(0x01,0xa6);
 100   1              ZLG7290_SendCmd(0x01,0xae);
 101   1          ZLG7290_SendCmd(0x66,key_code/10);    
 102   1          ZLG7290_SendCmd(0x67,key_code%10);
 103   1      } 
 104          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    282    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
